package com.allxone.coinmarket.model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class TimeTrackingExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table time_tracking
     *
     * @mbg.generated Thu Feb 22 09:13:49 ICT 2024
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table time_tracking
     *
     * @mbg.generated Thu Feb 22 09:13:49 ICT 2024
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table time_tracking
     *
     * @mbg.generated Thu Feb 22 09:13:49 ICT 2024
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table time_tracking
     *
     * @mbg.generated Thu Feb 22 09:13:49 ICT 2024
     */
    public TimeTrackingExample() {
        oredCriteria = new ArrayList<>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table time_tracking
     *
     * @mbg.generated Thu Feb 22 09:13:49 ICT 2024
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table time_tracking
     *
     * @mbg.generated Thu Feb 22 09:13:49 ICT 2024
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table time_tracking
     *
     * @mbg.generated Thu Feb 22 09:13:49 ICT 2024
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table time_tracking
     *
     * @mbg.generated Thu Feb 22 09:13:49 ICT 2024
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table time_tracking
     *
     * @mbg.generated Thu Feb 22 09:13:49 ICT 2024
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table time_tracking
     *
     * @mbg.generated Thu Feb 22 09:13:49 ICT 2024
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table time_tracking
     *
     * @mbg.generated Thu Feb 22 09:13:49 ICT 2024
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table time_tracking
     *
     * @mbg.generated Thu Feb 22 09:13:49 ICT 2024
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table time_tracking
     *
     * @mbg.generated Thu Feb 22 09:13:49 ICT 2024
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table time_tracking
     *
     * @mbg.generated Thu Feb 22 09:13:49 ICT 2024
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table time_tracking
     *
     * @mbg.generated Thu Feb 22 09:13:49 ICT 2024
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        protected void addCriterionForJDBCTime(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Time(value.getTime()), property);
        }

        protected void addCriterionForJDBCTime(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Time> timeList = new ArrayList<>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                timeList.add(new java.sql.Time(iter.next().getTime()));
            }
            addCriterion(condition, timeList, property);
        }

        protected void addCriterionForJDBCTime(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Time(value1.getTime()), new java.sql.Time(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andEmployeeIdIsNull() {
            addCriterion("employee_id is null");
            return (Criteria) this;
        }

        public Criteria andEmployeeIdIsNotNull() {
            addCriterion("employee_id is not null");
            return (Criteria) this;
        }

        public Criteria andEmployeeIdEqualTo(Long value) {
            addCriterion("employee_id =", value, "employeeId");
            return (Criteria) this;
        }

        public Criteria andEmployeeIdNotEqualTo(Long value) {
            addCriterion("employee_id <>", value, "employeeId");
            return (Criteria) this;
        }

        public Criteria andEmployeeIdGreaterThan(Long value) {
            addCriterion("employee_id >", value, "employeeId");
            return (Criteria) this;
        }

        public Criteria andEmployeeIdGreaterThanOrEqualTo(Long value) {
            addCriterion("employee_id >=", value, "employeeId");
            return (Criteria) this;
        }

        public Criteria andEmployeeIdLessThan(Long value) {
            addCriterion("employee_id <", value, "employeeId");
            return (Criteria) this;
        }

        public Criteria andEmployeeIdLessThanOrEqualTo(Long value) {
            addCriterion("employee_id <=", value, "employeeId");
            return (Criteria) this;
        }

        public Criteria andEmployeeIdIn(List<Long> values) {
            addCriterion("employee_id in", values, "employeeId");
            return (Criteria) this;
        }

        public Criteria andEmployeeIdNotIn(List<Long> values) {
            addCriterion("employee_id not in", values, "employeeId");
            return (Criteria) this;
        }

        public Criteria andEmployeeIdBetween(Long value1, Long value2) {
            addCriterion("employee_id between", value1, value2, "employeeId");
            return (Criteria) this;
        }

        public Criteria andEmployeeIdNotBetween(Long value1, Long value2) {
            addCriterion("employee_id not between", value1, value2, "employeeId");
            return (Criteria) this;
        }

        public Criteria andDateTrackIsNull() {
            addCriterion("date_track is null");
            return (Criteria) this;
        }

        public Criteria andDateTrackIsNotNull() {
            addCriterion("date_track is not null");
            return (Criteria) this;
        }

        public Criteria andDateTrackEqualTo(Date value) {
            addCriterionForJDBCDate("date_track =", value, "dateTrack");
            return (Criteria) this;
        }

        public Criteria andDateTrackNotEqualTo(Date value) {
            addCriterionForJDBCDate("date_track <>", value, "dateTrack");
            return (Criteria) this;
        }

        public Criteria andDateTrackGreaterThan(Date value) {
            addCriterionForJDBCDate("date_track >", value, "dateTrack");
            return (Criteria) this;
        }

        public Criteria andDateTrackGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("date_track >=", value, "dateTrack");
            return (Criteria) this;
        }

        public Criteria andDateTrackLessThan(Date value) {
            addCriterionForJDBCDate("date_track <", value, "dateTrack");
            return (Criteria) this;
        }

        public Criteria andDateTrackLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("date_track <=", value, "dateTrack");
            return (Criteria) this;
        }

        public Criteria andDateTrackIn(List<Date> values) {
            addCriterionForJDBCDate("date_track in", values, "dateTrack");
            return (Criteria) this;
        }

        public Criteria andDateTrackNotIn(List<Date> values) {
            addCriterionForJDBCDate("date_track not in", values, "dateTrack");
            return (Criteria) this;
        }

        public Criteria andDateTrackBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("date_track between", value1, value2, "dateTrack");
            return (Criteria) this;
        }

        public Criteria andDateTrackNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("date_track not between", value1, value2, "dateTrack");
            return (Criteria) this;
        }

        public Criteria andClockInIsNull() {
            addCriterion("clock_in is null");
            return (Criteria) this;
        }

        public Criteria andClockInIsNotNull() {
            addCriterion("clock_in is not null");
            return (Criteria) this;
        }

        public Criteria andClockInEqualTo(Date value) {
            addCriterionForJDBCTime("clock_in =", value, "clockIn");
            return (Criteria) this;
        }

        public Criteria andClockInNotEqualTo(Date value) {
            addCriterionForJDBCTime("clock_in <>", value, "clockIn");
            return (Criteria) this;
        }

        public Criteria andClockInGreaterThan(Date value) {
            addCriterionForJDBCTime("clock_in >", value, "clockIn");
            return (Criteria) this;
        }

        public Criteria andClockInGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCTime("clock_in >=", value, "clockIn");
            return (Criteria) this;
        }

        public Criteria andClockInLessThan(Date value) {
            addCriterionForJDBCTime("clock_in <", value, "clockIn");
            return (Criteria) this;
        }

        public Criteria andClockInLessThanOrEqualTo(Date value) {
            addCriterionForJDBCTime("clock_in <=", value, "clockIn");
            return (Criteria) this;
        }

        public Criteria andClockInIn(List<Date> values) {
            addCriterionForJDBCTime("clock_in in", values, "clockIn");
            return (Criteria) this;
        }

        public Criteria andClockInNotIn(List<Date> values) {
            addCriterionForJDBCTime("clock_in not in", values, "clockIn");
            return (Criteria) this;
        }

        public Criteria andClockInBetween(Date value1, Date value2) {
            addCriterionForJDBCTime("clock_in between", value1, value2, "clockIn");
            return (Criteria) this;
        }

        public Criteria andClockInNotBetween(Date value1, Date value2) {
            addCriterionForJDBCTime("clock_in not between", value1, value2, "clockIn");
            return (Criteria) this;
        }

        public Criteria andClockOutIsNull() {
            addCriterion("clock_out is null");
            return (Criteria) this;
        }

        public Criteria andClockOutIsNotNull() {
            addCriterion("clock_out is not null");
            return (Criteria) this;
        }

        public Criteria andClockOutEqualTo(Date value) {
            addCriterionForJDBCTime("clock_out =", value, "clockOut");
            return (Criteria) this;
        }

        public Criteria andClockOutNotEqualTo(Date value) {
            addCriterionForJDBCTime("clock_out <>", value, "clockOut");
            return (Criteria) this;
        }

        public Criteria andClockOutGreaterThan(Date value) {
            addCriterionForJDBCTime("clock_out >", value, "clockOut");
            return (Criteria) this;
        }

        public Criteria andClockOutGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCTime("clock_out >=", value, "clockOut");
            return (Criteria) this;
        }

        public Criteria andClockOutLessThan(Date value) {
            addCriterionForJDBCTime("clock_out <", value, "clockOut");
            return (Criteria) this;
        }

        public Criteria andClockOutLessThanOrEqualTo(Date value) {
            addCriterionForJDBCTime("clock_out <=", value, "clockOut");
            return (Criteria) this;
        }

        public Criteria andClockOutIn(List<Date> values) {
            addCriterionForJDBCTime("clock_out in", values, "clockOut");
            return (Criteria) this;
        }

        public Criteria andClockOutNotIn(List<Date> values) {
            addCriterionForJDBCTime("clock_out not in", values, "clockOut");
            return (Criteria) this;
        }

        public Criteria andClockOutBetween(Date value1, Date value2) {
            addCriterionForJDBCTime("clock_out between", value1, value2, "clockOut");
            return (Criteria) this;
        }

        public Criteria andClockOutNotBetween(Date value1, Date value2) {
            addCriterionForJDBCTime("clock_out not between", value1, value2, "clockOut");
            return (Criteria) this;
        }

        public Criteria andTotalHoursIsNull() {
            addCriterion("total_hours is null");
            return (Criteria) this;
        }

        public Criteria andTotalHoursIsNotNull() {
            addCriterion("total_hours is not null");
            return (Criteria) this;
        }

        public Criteria andTotalHoursEqualTo(BigDecimal value) {
            addCriterion("total_hours =", value, "totalHours");
            return (Criteria) this;
        }

        public Criteria andTotalHoursNotEqualTo(BigDecimal value) {
            addCriterion("total_hours <>", value, "totalHours");
            return (Criteria) this;
        }

        public Criteria andTotalHoursGreaterThan(BigDecimal value) {
            addCriterion("total_hours >", value, "totalHours");
            return (Criteria) this;
        }

        public Criteria andTotalHoursGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("total_hours >=", value, "totalHours");
            return (Criteria) this;
        }

        public Criteria andTotalHoursLessThan(BigDecimal value) {
            addCriterion("total_hours <", value, "totalHours");
            return (Criteria) this;
        }

        public Criteria andTotalHoursLessThanOrEqualTo(BigDecimal value) {
            addCriterion("total_hours <=", value, "totalHours");
            return (Criteria) this;
        }

        public Criteria andTotalHoursIn(List<BigDecimal> values) {
            addCriterion("total_hours in", values, "totalHours");
            return (Criteria) this;
        }

        public Criteria andTotalHoursNotIn(List<BigDecimal> values) {
            addCriterion("total_hours not in", values, "totalHours");
            return (Criteria) this;
        }

        public Criteria andTotalHoursBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("total_hours between", value1, value2, "totalHours");
            return (Criteria) this;
        }

        public Criteria andTotalHoursNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("total_hours not between", value1, value2, "totalHours");
            return (Criteria) this;
        }

        public Criteria andCreatedAtIsNull() {
            addCriterion("created_at is null");
            return (Criteria) this;
        }

        public Criteria andCreatedAtIsNotNull() {
            addCriterion("created_at is not null");
            return (Criteria) this;
        }

        public Criteria andCreatedAtEqualTo(Date value) {
            addCriterion("created_at =", value, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtNotEqualTo(Date value) {
            addCriterion("created_at <>", value, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtGreaterThan(Date value) {
            addCriterion("created_at >", value, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtGreaterThanOrEqualTo(Date value) {
            addCriterion("created_at >=", value, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtLessThan(Date value) {
            addCriterion("created_at <", value, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtLessThanOrEqualTo(Date value) {
            addCriterion("created_at <=", value, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtIn(List<Date> values) {
            addCriterion("created_at in", values, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtNotIn(List<Date> values) {
            addCriterion("created_at not in", values, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtBetween(Date value1, Date value2) {
            addCriterion("created_at between", value1, value2, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtNotBetween(Date value1, Date value2) {
            addCriterion("created_at not between", value1, value2, "createdAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtIsNull() {
            addCriterion("updated_at is null");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtIsNotNull() {
            addCriterion("updated_at is not null");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtEqualTo(Date value) {
            addCriterion("updated_at =", value, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtNotEqualTo(Date value) {
            addCriterion("updated_at <>", value, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtGreaterThan(Date value) {
            addCriterion("updated_at >", value, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtGreaterThanOrEqualTo(Date value) {
            addCriterion("updated_at >=", value, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtLessThan(Date value) {
            addCriterion("updated_at <", value, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtLessThanOrEqualTo(Date value) {
            addCriterion("updated_at <=", value, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtIn(List<Date> values) {
            addCriterion("updated_at in", values, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtNotIn(List<Date> values) {
            addCriterion("updated_at not in", values, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtBetween(Date value1, Date value2) {
            addCriterion("updated_at between", value1, value2, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtNotBetween(Date value1, Date value2) {
            addCriterion("updated_at not between", value1, value2, "updatedAt");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table time_tracking
     *
     * @mbg.generated do_not_delete_during_merge Thu Feb 22 09:13:49 ICT 2024
     */
    public static class Criteria extends GeneratedCriteria {
        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table time_tracking
     *
     * @mbg.generated Thu Feb 22 09:13:49 ICT 2024
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}