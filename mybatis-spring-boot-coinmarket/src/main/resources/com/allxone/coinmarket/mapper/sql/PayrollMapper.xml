<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.allxone.coinmarket.mapper.PayrollMapper">
  <resultMap id="BaseResultMap" type="com.allxone.coinmarket.model.Payroll">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Feb 22 09:13:49 ICT 2024.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="employee_id" jdbcType="BIGINT" property="employeeId" />
    <result column="salary" jdbcType="DECIMAL" property="salary" />
    <result column="bonus" jdbcType="DECIMAL" property="bonus" />
    <result column="deductions" jdbcType="DECIMAL" property="deductions" />
    <result column="net_salary" jdbcType="DECIMAL" property="netSalary" />
    <result column="period_start" jdbcType="DATE" property="periodStart" />
    <result column="period_end" jdbcType="DATE" property="periodEnd" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="holiday_ids" jdbcType="VARCHAR" property="holidayIds" />
    <result column="leave_paid_days" jdbcType="SMALLINT" property="leavePaidDays" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Feb 22 09:13:49 ICT 2024.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Feb 22 09:13:49 ICT 2024.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Feb 22 09:13:49 ICT 2024.
    -->
    id, employee_id, salary, bonus, deductions, net_salary, period_start, period_end,
    created_at, updated_at,holiday_ids,leave_paid_days
  </sql>
  <select id="selectByExample" parameterType="com.allxone.coinmarket.model.PayrollExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Feb 22 09:13:49 ICT 2024.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from payroll
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Feb 22 09:13:49 ICT 2024.
    -->
    select 
    <include refid="Base_Column_List" />
    from payroll
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Feb 22 09:13:49 ICT 2024.
    -->
    delete from payroll
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.allxone.coinmarket.model.PayrollExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Feb 22 09:13:49 ICT 2024.
    -->
    delete from payroll
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.allxone.coinmarket.model.Payroll">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Feb 22 09:13:49 ICT 2024.
    -->
    insert into payroll (id, employee_id, salary, 
      bonus, deductions, net_salary, 
      period_start, period_end, created_at, 
      updated_at)
    values (#{id,jdbcType=BIGINT}, #{employeeId,jdbcType=BIGINT}, #{salary,jdbcType=DECIMAL}, 
      #{bonus,jdbcType=DECIMAL}, #{deductions,jdbcType=DECIMAL}, #{netSalary,jdbcType=DECIMAL}, 
      #{periodStart,jdbcType=DATE}, #{periodEnd,jdbcType=DATE}, #{createdAt,jdbcType=TIMESTAMP}, 
      #{updatedAt,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.allxone.coinmarket.model.Payroll">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Feb 22 09:13:49 ICT 2024.
    -->
    insert into payroll
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="employeeId != null">
        employee_id,
      </if>
      <if test="salary != null">
        salary,
      </if>
      <if test="bonus != null">
        bonus,
      </if>
      <if test="deductions != null">
        deductions,
      </if>
      <if test="netSalary != null">
        net_salary,
      </if>
      <if test="periodStart != null">
        period_start,
      </if>
      <if test="periodEnd != null">
        period_end,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="employeeId != null">
        #{employeeId,jdbcType=BIGINT},
      </if>
      <if test="salary != null">
        #{salary,jdbcType=DECIMAL},
      </if>
      <if test="bonus != null">
        #{bonus,jdbcType=DECIMAL},
      </if>
      <if test="deductions != null">
        #{deductions,jdbcType=DECIMAL},
      </if>
      <if test="netSalary != null">
        #{netSalary,jdbcType=DECIMAL},
      </if>
      <if test="periodStart != null">
        #{periodStart,jdbcType=DATE},
      </if>
      <if test="periodEnd != null">
        #{periodEnd,jdbcType=DATE},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.allxone.coinmarket.model.PayrollExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Feb 22 09:13:49 ICT 2024.
    -->
    select count(*) from payroll
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Feb 22 09:13:49 ICT 2024.
    -->
    update payroll
    <set>
      <if test="row.id != null">
        id = #{row.id,jdbcType=BIGINT},
      </if>
      <if test="row.employeeId != null">
        employee_id = #{row.employeeId,jdbcType=BIGINT},
      </if>
      <if test="row.salary != null">
        salary = #{row.salary,jdbcType=DECIMAL},
      </if>
      <if test="row.bonus != null">
        bonus = #{row.bonus,jdbcType=DECIMAL},
      </if>
      <if test="row.deductions != null">
        deductions = #{row.deductions,jdbcType=DECIMAL},
      </if>
      <if test="row.netSalary != null">
        net_salary = #{row.netSalary,jdbcType=DECIMAL},
      </if>
      <if test="row.periodStart != null">
        period_start = #{row.periodStart,jdbcType=DATE},
      </if>
      <if test="row.periodEnd != null">
        period_end = #{row.periodEnd,jdbcType=DATE},
      </if>
      <if test="row.createdAt != null">
        created_at = #{row.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="row.updatedAt != null">
        updated_at = #{row.updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Feb 22 09:13:49 ICT 2024.
    -->
    update payroll
    set id = #{row.id,jdbcType=BIGINT},
      employee_id = #{row.employeeId,jdbcType=BIGINT},
      salary = #{row.salary,jdbcType=DECIMAL},
      bonus = #{row.bonus,jdbcType=DECIMAL},
      deductions = #{row.deductions,jdbcType=DECIMAL},
      net_salary = #{row.netSalary,jdbcType=DECIMAL},
      period_start = #{row.periodStart,jdbcType=DATE},
      period_end = #{row.periodEnd,jdbcType=DATE},
      created_at = #{row.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{row.updatedAt,jdbcType=TIMESTAMP}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.allxone.coinmarket.model.Payroll">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Feb 22 09:13:49 ICT 2024.
    -->
    update payroll
    <set>
      <if test="employeeId != null">
        employee_id = #{employeeId,jdbcType=BIGINT},
      </if>
      <if test="salary != null">
        salary = #{salary,jdbcType=DECIMAL},
      </if>
      <if test="bonus != null">
        bonus = #{bonus,jdbcType=DECIMAL},
      </if>
      <if test="deductions != null">
        deductions = #{deductions,jdbcType=DECIMAL},
      </if>
      <if test="netSalary != null">
        net_salary = #{netSalary,jdbcType=DECIMAL},
      </if>
      <if test="periodStart != null">
        period_start = #{periodStart,jdbcType=DATE},
      </if>
      <if test="periodEnd != null">
        period_end = #{periodEnd,jdbcType=DATE},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="holiday_ids != null">
        holiday_ids = #{holidayIds,jdbcType=VARCHAR},
      </if>
      <if test="leave_paid_days != null">
        leave_paid_days = #{leavePaidDays,jdbcType=SMALLINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.allxone.coinmarket.model.Payroll">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Feb 22 09:13:49 ICT 2024.
    -->
    update payroll
    set employee_id = #{employeeId,jdbcType=BIGINT},
      salary = #{salary,jdbcType=DECIMAL},
      bonus = #{bonus,jdbcType=DECIMAL},
      deductions = #{deductions,jdbcType=DECIMAL},
      net_salary = #{netSalary,jdbcType=DECIMAL},
      period_start = #{periodStart,jdbcType=DATE},
      period_end = #{periodEnd,jdbcType=DATE},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      holiday_ids=#{holidayIds,jdbcType=VARCHAR},
      leave_paid_days=#{leavePaidDays,jdbcType=SMALLINT}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="getAllPayrolls" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT * FROM payroll where  month(period_start) = #{month,jdbcType=INTEGER}
  </select>

  <select id="getAllSalary" parameterType="java.lang.Integer" resultType="com.allxone.coinmarket.dto.response.PayrollDTO">
    SELECT p.id,e.last_name, e.first_name, e.email, e.hire_date, p.salary, p.net_salary
    FROM employees e JOIN payroll p ON e.id = p.employee_id
    where month(period_start) = #{month,jdbcType=INTEGER}
      and  year(period_start) = year(current_date())
  </select>

  <select id="getAllSalaryByFirstName" parameterType="java.util.Map" resultType="com.allxone.coinmarket.dto.response.PayrollDTO">
    SELECT e.last_name, e.first_name, e.email, e.hire_date, p.salary, p.net_salary
    FROM employees e JOIN payroll p ON e.id = p.employee_id
    WHERE MONTH(p.period_start) = #{month, jdbcType=INTEGER}
      AND YEAR(p.period_start) = YEAR(CURRENT_DATE())
      AND e.first_name LIKE #{firstname, jdbcType=NVARCHAR}
  </select>


  <select id="sumSalaryByMonth" parameterType="com.allxone.coinmarket.model.PayrollExample" resultType="java.math.BigDecimal">
    select sum(coalesce(bonus, 0) + coalesce(net_salary, 0)) from payroll
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>

  <select id="getEmployeeSalaryByMonth" parameterType="java.util.Map" resultMap="BaseResultMap">
  <![CDATA[
    SELECT *
    FROM payroll
    WHERE employee_id = #{employeeId, jdbcType=BIGINT}
      AND MONTH(period_start) = #{month, jdbcType=INTEGER}
      AND YEAR(period_start) = YEAR(CURRENT_DATE())
    ]]>
</select>

  <select id="getTopThreeLatestSalaries" resultMap="BaseResultMap" parameterType="java.lang.Long">
    SELECT *
    FROM payroll
    WHERE employee_id = #{employeeId, jdbcType=BIGINT}
    ORDER BY period_start DESC
      LIMIT 3
  </select>

  <select id="calcNetSalary" parameterType="com.allxone.coinmarket.model.PayrollExample" resultType="java.util.Map">
    WITH hour_calc AS (
    SELECT sum(
        CASE
            WHEN DAYOFWEEK(date_track) = 1 THEN total_hours * 2
            WHEN DAYOFWEEK(date_track) = 7 OR clock_in >= '20:00:00' OR (clock_in >= '00:00:00' AND clock_out &lt;= '06:00:00') THEN total_hours * 1.5
            ELSE total_hours
        END) as working_hrs,
        employee_id,
        month(date_track) as month, year(date_track) as year
    FROM time_tracking
    WHERE
        employee_id in
      <foreach collection="list" item="id" open="(" separator="," close=")">
        #{id}
      </foreach> and
    (Month(date_track) between #{monthFrom} and #{monthTo}) and (Year(date_track) between #{yearFrom} and #{yearTo}) group by employee_id, month
    )

    select p.id, p.employee_id, concat(e.last_name,' ',e.first_name) as name, p.salary, (h.working_hrs+(p.leave_paid_days * 8) +
    ((SELECT SUM(duration_days) FROM holidays h WHERE JSON_CONTAINS(p.holiday_ids, CAST(h.id AS JSON), '$')) * 8)
    ) * p.salary * (100 - (select ti.tax_rate from tax_information ti where ti.status =1 and ti.employee_id=h.employee_id) - (SELECT SUM(insurance_rate) FROM insurance_type t WHERE JSON_CONTAINS(e.insurance_ids, CAST(t.id AS JSON), '$'))
    ) / 100 + p.bonus - p.deductions AS Net , h.month, h.year
    from hour_calc h
    JOIN
    payroll p ON p.employee_id = h.employee_id
    JOIN
    employees e ON e.id = h.employee_id
    where month(p.period_start) = h.month
    group by p.employee_id, p.id
  </select>
</mapper>
